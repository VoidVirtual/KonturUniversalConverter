#pragma once
#include "Poco/Net/HTTPServer.h"
#include "Poco/Net/HTTPRequestHandler.h"
#include "Poco/Net/HTTPRequestHandlerFactory.h"
#include "Poco/Net/HTTPServerRequest.h"
#include "Poco/Net/HTTPServerResponse.h"
#include "Poco/Net/ServerSocket.h"
#include "Poco/Util/ServerApplication.h"
#include <iostream>
#include "algorithm/AccurateMultiplier.h"
#include <iomanip>
#include "converter/Converter.h"
#include <variant>
#include "ConvertingHandler.h"
template<class T>
    using OptionCallback = Poco::Util::OptionCallback<T>;
using Option = Poco::Util::Option;
using OptionSet = Poco::Util::OptionSet;
using HTTPServer = Poco::Net::HTTPServer;
using HTTPServerParams = Poco::Net::HTTPServerParams;
using ServerSocket = Poco::Net::ServerSocket;
using ServerApplication = Poco::Util::ServerApplication;


class ConvertingServerApp : public ServerApplication
{
public:
    ConvertingServerApp() {
        setUnixOptions(true); // follows from the task conditions
    }
protected:
    int main(std::vector<std::string> const&);
    void defineOptions(OptionSet& options);
    void handleRulesFile(std::string const&, std::string const& value);
    void ConvertingServerApp::handleSetPort(std::string const&, std::string const& value);
private:
    std::string rulesFilePath;
    uint16_t port = 80;
private:
    inline static const uint8_t significantDigits = 15;
};
